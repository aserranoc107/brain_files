############################ 1 ##########################################

import requests
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

############################ 2 ##########################################

def fetch_data(url):
    response = requests.get(url)
    if response.status_code == 200:
        lines = response.text.splitlines()
        sentiment_values = {}
        custom_phrases = {}
        
        for line in lines:
            if not line.strip() or line.startswith("#"):
                continue
            try:
                if line.startswith("custom:"):
                    parts = line.split('   ')
                    if len(parts) < 2:
                        print(f"Skipping line due to format issue: {line}")
                        continue
                    
                    key = parts[0].replace("custom:", "").strip().lower()
                    response_text = parts[1].strip()
                    link = parts[2].strip() if len(parts) > 2 else None
                    custom_phrases[key] = {
                        'response': response_text,
                        'link': link
                    }
                else:
                    parts = line.split('\t')
                    if len(parts) != 2:
                        print(f"Skipping line due to format issue: {line}")
                        continue
                    
                    key = parts[0].strip().lower()
                    value = int(parts[1].strip())
                    sentiment_values[key] = value
            except (ValueError, IndexError) as e:
                print(f"Skipping line due to error: {line} - Error: {e}")
        
        return sentiment_values, custom_phrases
    else:
        raise Exception(f"Failed to retrieve the file: HTTP Status {response.status_code}")

########################### 3 ###########################################

def check_custom_phrases(text, custom_phrases):
    for phrase, data in custom_phrases.items():
        if phrase in text:
            return data['response'], data.get('link')
    return None, None

############################ 4 ##########################################

def find_closest_sentiment(text, sentiment_values):
    if not sentiment_values:
        return None, None
    
    text_vector = [text]
    sentiment_keys = list(sentiment_values.keys())
    
    vectorizer = CountVectorizer().fit_transform(text_vector + sentiment_keys)
    vectors = vectorizer.toarray()
    
    cosine_matrix = cosine_similarity(vectors[0:1], vectors[1:])
    scores = cosine_matrix.flatten()
    
    max_score_index = scores.argmax()
    closest_sentiment = sentiment_keys[max_score_index]
    score = scores[max_score_index]
    
    return closest_sentiment, score

############################# 5 #########################################

if __name__ == "__main__":
    url = "https://raw.githubusercontent.com/aserranoc/texts/main/first_text.txt"
    
    try:
        sentiment_values, custom_phrases = fetch_data(url)
        
        text = input("How do you feel today? ").lower().strip()
        
        response, link = check_custom_phrases(text, custom_phrases)
        if response:
            print(f"Most suitable response: {response}")
            if link:
                print(f"Learn more: {link}")
        else:
            # Check for closest sentiment
            closest_sentiment, score = find_closest_sentiment(text, sentiment_values)
            if closest_sentiment:
                print(f"Closest sentiment: '{closest_sentiment}' with similarity score: {score:.2f}")
            else:
                print("No suitable sentiment found.")
    except Exception as e:
        print(str(e))
